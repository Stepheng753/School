function GoppaError(C, G, m)
    F<B>:=GF(2^m);
    R<z>:=PolynomialRing(F);
    L:= [x : x in F | Evaluate(G,x) ne 0];
    r:= Degree(G);
    n:= #L;
    k:= n - m*r;
    d:= r + 1;

    S0:= [Modinv(z - L[i], G) : i in [1..n]];
    Ra:=0;
    for i in [1..n] do
        Ra:=Ra + (S0[i] * C[1,i]);
    end for;

    // Check to see if C is a goppa codeword.
    GoppaCheck:= Ra mod G eq 0;


    if GoppaCheck eq false then

        h:=Modinv(Ra,G);
        d := (h + z);
        for i in [1..(m*r - 1)] do
            d := d^2 mod G;
        end for;

        function EuclideanAlgorithm(G, d)
            ng := Degree(G);    // Degree of G
            t_im2 := R!0;       // t_0 = 0
            t_im1 := R!1;       // t_1 = 1
            t_i := t_im1;       // t_i = t_{i-1}
            r_i := d;

            if Degree(t_i) le Floor(ng/2) and Degree(r_i) le Floor((ng-1)/2) then
                return r_i, t_i;
            else
            repeat
                q, r_i := Quotrem(G, d); 
                if r_i ne 0 then 
                    G := d; 
                    d := r_i; 
                    // t_i = q t_{i-1} + t_{i-2}
                    t_i := q * t_im1 + t_im2; 
                    // Increment i by 1
                    t_im2 := t_im1; 
                    t_im1 := t_i; 
                end if;  
            until Degree(t_i) le Floor(ng/2) and Degree(r_i) le Floor((ng-1)/2);
                return r_i, t_i;
            end if;
        end function; 

        alpha, beta := EuclideanAlgorithm(G, d);
        sigma := z*beta^2 + alpha^2;
        roots := Roots(sigma);
        if #roots gt 0 then
            index := 1;
            errorIndicies := [0 : i in [1..#roots]];
            for j in [1..#roots] do
                for i in [1..#L] do
                    if L[i] eq roots[j,1] then
                        errorIndicies[j] := i;
                    end if;
                end for;
            end for;
            return errorIndicies;
        end if;
        return [];
    end if;
    return []; 
end function;

function leftIdentity(G, k, n)
    indicies := [0 : i in [1..k]];
    index := 1;
    for j in [1..n] do
        rest := true;
        for i in [1..k] do
            if i ne index and G[i][j] eq 1 then
                rest := false;
            end if;
        end for;
        if rest eq true and G[index][j] eq 1 then
                indicies[index] := j;
                index := index + 1;
                if index gt k then
                    break;
                end if;
        end if;
    end for;

    return indicies;
end function;

function randomPermuation(n)
    Q := [0 : i in [1..n]];
    for i in [1..n] do
        repeat
            a := Random(1,n);
        until (a in Q) eq false;
        Q[i] := a;
    end for;
    return Q;
end function;

function EncryptRandomMessage(mField, printDetails)
    F<B> := GF(2^mField);                   
    R<z> := PolynomialRing(F);

    if mField eq 3 then
        Gpoly := B^2*z^2 + z + B^3;
    end if;
    if mField eq 4 then
        Gpoly := B^14*z^3 + B^10*z^2 + B^9*z + B^13;
    end if;
    if mField eq 5 then
        Gpoly := B^18*z^6 + B^18*z^5 + B^26*z^4 + B^8*z^3 + B^26*z^2 + B^16*z + B^15;
    end if;
    if mField eq 6 then
        Gpoly := B^24*z^3 + B^59*z^2 + B^47*z + B^57;
    end if;
    if mField eq 7 then
        Gpoly := B^57*z^15 + B^14*z^14 + B^101*z^13 + B^17*z^12 + B^83*z^11 + B^9*z^10 + B^52*z^9 + B^64*z^8 + B^25*z^7 + B^74*z^6 + B^59*z^5 + B^43*z^4 + B^94*z^3 + B^105*z^2 + B^59*z + B^60;
    end if;


    L := [x : x in F | Evaluate(Gpoly,x) ne 0];
    r := Degree(Gpoly);
    n := #L;  
    C := GoppaCode(L, Gpoly);
    k := Dimension(C);

    G := GeneratorMatrix(C);
    G := Matrix(R,G);
    identityIndicies := leftIdentity(G,k,n);

    S := RandomGLnZ(k, 2, 3);
    S := Matrix(R, S);

    Q := randomPermuation(n);
    P := PermutationMatrix(R, Q);

    Ghat := S*G*P;

    m := [Random(0,1) : i in [1..k]];
    m := Matrix(R,1,k,m);

    z:= [0: i in [1..n]];
    weight := Random(1, r);
    for i in [1..weight] do
        repeat
            index := Random(1,n);
        until z[index] eq 0;
        z[index] := z[index] + 1;
    end for;
    z:=Matrix(R,1,n,z);

    c:= m*Ghat + z;

    if printDetails then
        print " ----- ";  
        print "Gpoly: ", Gpoly;
        print " ----- ";  
        print "r: ", r;
        print " ----- ";  
        print "n: ", n;
        print " ----- ";  
        print "k: ", k;
        print " ----- ";
        print "G: ", G;
        print " ----- ";
        print "S: ", S;
        print " ----- ";
        print "P: ", P;
        print " ----- ";
        print "Ghat: ", Ghat;
        print " ----- ";
        print "m: ", m;
        print " ----- ";
        print "z: ", z;
        print " ----- ";
        print "c: ", c;
    end if;

    return c, mField, S, G, P, Gpoly, identityIndicies, m;

end function;

function DecryptRandomMessage(c, mField, S, G, P, Gpoly, identityIndicies, printDetails)
    chat:=c*(P^-1);
    errorIndicies:=GoppaError(chat,Gpoly, mField);
    mhat:=chat;
    if #errorIndicies gt 0 then
        for i in [1..#errorIndicies] do
            mhat[1,errorIndicies[i]]:=mhat[1,errorIndicies[i]] + 1;
        end for;
    end if;
    mhat := Submatrix(mhat, [1..1], identityIndicies);

    mDecrypted:=mhat*(S^-1);

    if printDetails then
        print " ----- ";
        print "chat: ", chat;

        print " ----- ";
        print "mhat: ", mhat;

        print " ----- ";
        print "mDecrypted: ", mDecrypted;
    end if;

    return mDecrypted;
end function;

mField := 4;
c, mField, S, G, P, Gpoly, identityIndicies, m := EncryptRandomMessage(mField,true);
mDecrypted := DecryptRandomMessage(c, mField, S, G, P, Gpoly, identityIndicies, true);

if (m eq mDecrypted) then
    print "SUCCESS";
else
    print "FAILURE: LOOK FOR ERRORS";
end if;
 
